let pageLoaded = setInterval(() => {
  if (document.readyState === 'complete') {
    clearInterval(pageLoaded);


    //   Product images slider
    const productImages = document.querySelector('.product-images');
    if (productImages) {
      const arrow = `<svg aria-hidden="true" focusable="false" data-prefix="fas" data-icon="arrow-left" class="svg-inline--fa fa-arrow-left fa-w-14" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><path fill="currentColor" d="M257.5 445.1l-22.2 22.2c-9.4 9.4-24.6 9.4-33.9 0L7 273c-9.4-9.4-9.4-24.6 0-33.9L201.4 44.7c9.4-9.4 24.6-9.4 33.9 0l22.2 22.2c9.5 9.5 9.3 25-.4 34.3L136.6 216H424c13.3 0 24 10.7 24 24v32c0 13.3-10.7 24-24 24H136.6l120.5 114.8c9.8 9.3 10 24.8.4 34.3z"></path></svg>`;
      $('.product-images__content').slick({
        infinite: true,
        slidesToShow: 3,
        slidesToScroll: 1,
        // autoplay:true,
        // autoplaySpeed: 8000,
        dots: true,
        centerMode: true,
        // prevArrow:``,
        // nextArrow:``,
        prevArrow: `<div class='slick-prev pull-left'>${arrow}</div>`,
        nextArrow: `<div class='slick-next pull-right'>${arrow}</div>`,
        responsive: [{
            breakpoint: 992,
            settings: {
              arrows: false,
              slidesToShow: 2,
            }
          },
          {
            breakpoint: 576,
            settings: {
              arrows: false,
              slidesToShow: 1,
            }
          },
        ],
      });
    }



    // Filters
    const filtersContainer = document.querySelector('.filters');
    if (filtersContainer) {
      const productsContainer = document.querySelector('.collection__content');
      const products = document.querySelectorAll('.product');
      const tagsSelect = filtersContainer.querySelector('.filters__tags-select');
      const vendorsSelect = filtersContainer.querySelector('.filters__vendors-select');
      const sortSelect = filtersContainer.querySelector('.filters__sort-select');

      let filterProperties = {
        tag: tagsSelect.value,
        vendor: vendorsSelect.value
      }

      const initFilterEvents = (filter, property) => {
        filter.addEventListener('change', function () {
          if (property === 'tags') {
            filterProperties.tag = this.value;
            products.forEach(product => {
              if ((product.dataset.tags.includes(filterProperties.tag) || filterProperties.tag === 'all') && (product.dataset.vendor.includes(filterProperties.vendor) || filterProperties.vendor === 'all')) {
                product.classList.add('active');
              } else {
                product.classList.remove('active');
              }
            })
          } else if (property === 'vendor') {
            filterProperties.vendor = this.value;
            products.forEach(product => {
              if ((product.dataset.vendor.includes(filterProperties.vendor) || filterProperties.vendor === 'all') && (product.dataset.tags.includes(filterProperties.tag) || filterProperties.tag === 'all')) {
                product.classList.add('active');
              } else {
                product.classList.remove('active');
              }
            })
          }
        })
      }
      initFilterEvents(tagsSelect, 'tags');
      initFilterEvents(vendorsSelect, 'vendor');



      sortSelect.addEventListener('change', function(){

        if(this.value==='name-az'){

          products.forEach(product=>product.remove);
            [...products]
            .sort(function(a, b) {
              return a.dataset.name == b.dataset.name
                      ? 0
                      : (a.dataset.name > b.dataset.name ? 1 : -1);
            })
            .forEach(product=>productsContainer.appendChild(product))
          

        }else if(this.value==='name-za'){

          products.forEach(product=>product.remove);
            [...products]
            .sort(function(a, b) {
              return a.dataset.name == b.dataset.name
                      ? 0
                      : (b.dataset.name > a.dataset.name ? 1 : -1);
            })
            .forEach(product=>productsContainer.appendChild(product))

 
          console.log(products)

        }else if(this.value==='price-lh'){

          products.forEach(product=>product.remove);
          [...products]
          .sort(function(a, b) {
            return a.dataset.price == b.dataset.price
                    ? 0
                    : (parseInt(a.dataset.price) > parseInt(b.dataset.price) ? 1 : -1);
          })
          .forEach(product=>productsContainer.appendChild(product))
          
        }else if(this.value==='price-hl'){

          products.forEach(product=>product.remove);
          [...products]
          .sort(function(a, b) {
            return a.dataset.price == b.dataset.price
                    ? 0
                    : (parseInt(a.dataset.price) < parseInt(b.dataset.price) ? 1 : -1);
          })
          .forEach(product=>productsContainer.appendChild(product))
          
        }

      })


    }

  }
}, 10);